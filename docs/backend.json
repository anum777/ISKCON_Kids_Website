{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user profile in the Krishna Kids Zone application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user entity."
        },
        "childName": {
          "type": "string",
          "description": "The child's name."
        },
        "age": {
          "type": "number",
          "description": "The child's age."
        },
        "parentName": {
          "type": "string",
          "description": "The parent's name."
        },
        "email": {
          "type": "string",
          "description": "The user's email address.",
          "format": "email"
        },
        "emailVerified": {
          "type": "boolean",
          "description": "Indicates whether the user's email is verified."
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp of when the user was created.",
          "format": "date-time"
        },
        "profileImage": {
          "type": "string",
          "description": "URL of the user's profile image."
        }
      },
      "required": [
        "id",
        "childName",
        "age",
        "parentName",
        "email",
        "emailVerified",
        "createdAt"
      ]
    },
    "Story": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Story",
      "type": "object",
      "description": "Represents a Krishna story.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the story entity."
        },
        "title": {
          "type": "string",
          "description": "The title of the story."
        },
        "category": {
          "type": "string",
          "description": "The category of the story (e.g., Bhagavad Gita, Mahabharata)."
        },
        "content": {
          "type": "string",
          "description": "The content of the story."
        },
        "imageUrl": {
          "type": "string",
          "description": "URL of the story's image."
        },
        "audioUrl": {
          "type": "string",
          "description": "URL of the story's audio narration (optional)."
        },
        "moralLesson": {
          "type": "string",
          "description": "The moral lesson of the story."
        },
        "ageGroup": {
          "type": "string",
          "description": "The target age group for the story."
        },
        "duration": {
          "type": "number",
          "description": "The duration of the story (e.g., in minutes)."
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp of when the story was created.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "title",
        "category",
        "content",
        "imageUrl",
        "moralLesson",
        "ageGroup",
        "duration",
        "createdAt"
      ]
    },
    "UserStoryProgress": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UserStoryProgress",
      "type": "object",
      "description": "Represents a user's progress on a particular story.",
      "properties": {
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N UserStoryProgress)"
        },
        "storyId": {
          "type": "string",
          "description": "Reference to Story. (Relationship: Story 1:N UserStoryProgress)"
        },
        "completed": {
          "type": "boolean",
          "description": "Indicates whether the user has completed the story."
        },
        "bookmarked": {
          "type": "boolean",
          "description": "Indicates whether the user has bookmarked the story."
        },
        "lastRead": {
          "type": "string",
          "description": "Timestamp of when the story was last read by the user.",
          "format": "date-time"
        }
      },
      "required": [
        "userId",
        "storyId",
        "completed",
        "bookmarked"
      ]
    },
    "Event": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Event",
      "type": "object",
      "description": "Represents an ISKCON event.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the event entity."
        },
        "title": {
          "type": "string",
          "description": "The title of the event."
        },
        "description": {
          "type": "string",
          "description": "The description of the event."
        },
        "date": {
          "type": "string",
          "description": "The date of the event.",
          "format": "date-time"
        },
        "time": {
          "type": "string",
          "description": "The time of the event."
        },
        "venue": {
          "type": "string",
          "description": "The venue of the event."
        },
        "ageGroup": {
          "type": "string",
          "description": "The target age group for the event."
        },
        "imageUrl": {
          "type": "string",
          "description": "URL of the event's image."
        },
        "maxParticipants": {
          "type": "number",
          "description": "The maximum number of participants allowed for the event."
        },
        "category": {
          "type": "string",
          "description": "The category of the event (e.g., drama, drawing, festival)."
        },
        "registrationDeadline": {
          "type": "string",
          "description": "The deadline for event registration.",
          "format": "date-time"
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp of when the event was created.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "title",
        "description",
        "date",
        "time",
        "venue",
        "ageGroup",
        "imageUrl",
        "maxParticipants",
        "category",
        "registrationDeadline",
        "createdAt"
      ]
    },
    "EventRegistration": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "EventRegistration",
      "type": "object",
      "description": "Represents a user's registration for an event.",
      "properties": {
        "eventId": {
          "type": "string",
          "description": "Reference to Event. (Relationship: Event 1:N EventRegistration)"
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N EventRegistration)"
        },
        "childName": {
          "type": "string",
          "description": "The child's name."
        },
        "parentName": {
          "type": "string",
          "description": "The parent's name."
        },
        "email": {
          "type": "string",
          "description": "The email address used for registration.",
          "format": "email"
        },
        "registeredAt": {
          "type": "string",
          "description": "Timestamp of when the user registered for the event.",
          "format": "date-time"
        },
        "attended": {
          "type": "boolean",
          "description": "Indicates whether the user attended the event."
        }
      },
      "required": [
        "eventId",
        "userId",
        "childName",
        "parentName",
        "email",
        "registeredAt",
        "attended"
      ]
    },
    "Game": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Game",
      "type": "object",
      "description": "Represents a game in the Fun & Games section.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the game entity."
        },
        "name": {
          "type": "string",
          "description": "The name of the game."
        },
        "type": {
          "type": "string",
          "description": "The type of the game (e.g., quiz, coloring, memory)."
        },
        "questions": {
          "type": "array",
          "description": "Array of questions for quiz games.",
          "items": {
            "type": "string"
          }
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp of when the game was created.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "name",
        "type",
        "createdAt"
      ]
    },
    "GameScore": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "GameScore",
      "type": "object",
      "description": "Represents a user's score for a particular game.",
      "properties": {
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N GameScore)"
        },
        "gameId": {
          "type": "string",
          "description": "Reference to Game. (Relationship: Game 1:N GameScore)"
        },
        "score": {
          "type": "number",
          "description": "The user's score for the game."
        },
        "level": {
          "type": "string",
          "description": "The difficulty level of the game played."
        },
        "playedAt": {
          "type": "string",
          "description": "Timestamp of when the game was played.",
          "format": "date-time"
        },
        "timeTaken": {
          "type": "number",
          "description": "The time taken to complete the game (e.g., in seconds)."
        }
      },
      "required": [
        "userId",
        "gameId",
        "score",
        "level",
        "playedAt",
        "timeTaken"
      ]
    },
    "LeaderboardEntry": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "LeaderboardEntry",
      "type": "object",
      "description": "Represents an entry in the leaderboard for a particular game.",
      "properties": {
        "gameId": {
          "type": "string",
          "description": "Reference to Game. (Relationship: Game 1:N LeaderboardEntry)"
        },
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N LeaderboardEntry)"
        },
        "childName": {
          "type": "string",
          "description": "The child's name."
        },
        "highScore": {
          "type": "number",
          "description": "The user's highest score for the game."
        },
        "lastPlayed": {
          "type": "string",
          "description": "Timestamp of when the game was last played.",
          "format": "date-time"
        }
      },
      "required": [
        "gameId",
        "userId",
        "childName",
        "highScore",
        "lastPlayed"
      ]
    },
    "LearningContent": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "LearningContent",
      "type": "object",
      "description": "Represents learning content (bhajan, mantra, video, lesson).",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the learning content entity."
        },
        "title": {
          "type": "string",
          "description": "The title of the learning content."
        },
        "type": {
          "type": "string",
          "description": "The type of learning content (e.g., bhajan, mantra, video, lesson)."
        },
        "audioUrl": {
          "type": "string",
          "description": "URL of the audio file (if applicable)."
        },
        "videoUrl": {
          "type": "string",
          "description": "URL of the video file (if applicable)."
        },
        "lyrics": {
          "type": "string",
          "description": "The lyrics of the bhajan or mantra (if applicable)."
        },
        "description": {
          "type": "string",
          "description": "A description of the learning content."
        },
        "ageGroup": {
          "type": "string",
          "description": "The target age group for the learning content."
        },
        "duration": {
          "type": "number",
          "description": "The duration of the learning content (e.g., in minutes)."
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp of when the learning content was created.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "title",
        "type",
        "description",
        "ageGroup",
        "duration",
        "createdAt"
      ]
    },
    "UserLearningProgress": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "UserLearningProgress",
      "type": "object",
      "description": "Represents a user's progress on a particular piece of learning content.",
      "properties": {
        "userId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N UserLearningProgress)"
        },
        "contentId": {
          "type": "string",
          "description": "Reference to LearningContent. (Relationship: LearningContent 1:N UserLearningProgress)"
        },
        "completed": {
          "type": "boolean",
          "description": "Indicates whether the user has completed the learning content."
        },
        "favorite": {
          "type": "boolean",
          "description": "Indicates whether the user has favorited the learning content."
        },
        "lastAccessed": {
          "type": "string",
          "description": "Timestamp of when the learning content was last accessed by the user.",
          "format": "date-time"
        }
      },
      "required": [
        "userId",
        "contentId",
        "completed",
        "favorite"
      ]
    },
    "Gallery": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Gallery",
      "type": "object",
      "description": "Represents a photo gallery for an event.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the gallery entity."
        },
        "eventName": {
          "type": "string",
          "description": "The name of the event associated with the gallery."
        },
        "eventDate": {
          "type": "string",
          "description": "The date of the event associated with the gallery.",
          "format": "date-time"
        },
        "description": {
          "type": "string",
          "description": "A description of the gallery."
        },
        "coverImage": {
          "type": "string",
          "description": "URL of the gallery's cover image."
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp of when the gallery was created.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "eventName",
        "eventDate",
        "description",
        "coverImage",
        "createdAt"
      ]
    },
    "Photo": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Photo",
      "type": "object",
      "description": "Represents a photo in a gallery.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the photo entity."
        },
        "galleryId": {
          "type": "string",
          "description": "Reference to Gallery. (Relationship: Gallery 1:N Photo)"
        },
        "imageUrl": {
          "type": "string",
          "description": "URL of the photo's image."
        },
        "thumbnailUrl": {
          "type": "string",
          "description": "URL of the photo's thumbnail image."
        },
        "caption": {
          "type": "string",
          "description": "A caption for the photo."
        },
        "uploadedAt": {
          "type": "string",
          "description": "Timestamp of when the photo was uploaded.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "galleryId",
        "imageUrl",
        "thumbnailUrl",
        "caption",
        "uploadedAt"
      ]
    },
    "Contact": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Contact",
      "type": "object",
      "description": "Represents a contact form submission.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the contact entity."
        },
        "name": {
          "type": "string",
          "description": "The name of the person submitting the contact form."
        },
        "email": {
          "type": "string",
          "description": "The email address of the person submitting the contact form.",
          "format": "email"
        },
        "phone": {
          "type": "string",
          "description": "The phone number of the person submitting the contact form."
        },
        "message": {
          "type": "string",
          "description": "The message submitted in the contact form."
        },
        "inquiryType": {
          "type": "string",
          "description": "The type of inquiry (e.g., general, support, feedback)."
        },
        "status": {
          "type": "string",
          "description": "The status of the contact form submission (e.g., new, replied, closed)."
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp of when the contact form was submitted.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "name",
        "email",
        "phone",
        "message",
        "inquiryType",
        "status",
        "createdAt"
      ]
    },
    "ClassRegistration": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ClassRegistration",
      "type": "object",
      "description": "Represents a registration for a class.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the class registration entity."
        },
        "childName": {
          "type": "string",
          "description": "The child's name."
        },
        "age": {
          "type": "number",
          "description": "The child's age."
        },
        "parentName": {
          "type": "string",
          "description": "The parent's name."
        },
        "email": {
          "type": "string",
          "description": "The email address used for registration.",
          "format": "email"
        },
        "phone": {
          "type": "string",
          "description": "The phone number used for registration."
        },
        "preferredDay": {
          "type": "string",
          "description": "The preferred day for the class."
        },
        "preferredTime": {
          "type": "string",
          "description": "The preferred time for the class."
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp of when the registration was created.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "childName",
        "age",
        "parentName",
        "email",
        "phone",
        "preferredDay",
        "preferredTime",
        "createdAt"
      ]
    },
    "Admin": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Admin",
      "type": "object",
      "description": "Represents an administrator user.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the admin entity."
        },
        "email": {
          "type": "string",
          "description": "The admin's email address.",
          "format": "email"
        },
        "role": {
          "type": "string",
          "description": "The admin's role (e.g., superadmin, editor)."
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp of when the admin account was created.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "email",
        "role",
        "createdAt"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profiles. Each user has their own document.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            }
          ]
        }
      },
      {
        "path": "stories/{storyId}",
        "definition": {
          "entityName": "Story",
          "schema": {
            "$ref": "#/backend/entities/Story"
          },
          "description": "Stores Krishna stories. Open read access.",
          "params": [
            {
              "name": "storyId",
              "description": "The unique identifier for the story."
            }
          ]
        }
      },
      {
        "path": "users/{userId}/storyProgress/{storyId}",
        "definition": {
          "entityName": "UserStoryProgress",
          "schema": {
            "$ref": "#/backend/entities/UserStoryProgress"
          },
          "description": "Stores user-specific progress for each story.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "storyId",
              "description": "The unique identifier for the story."
            }
          ]
        }
      },
      {
        "path": "events/{eventId}",
        "definition": {
          "entityName": "Event",
          "schema": {
            "$ref": "#/backend/entities/Event"
          },
          "description": "Stores event details. Open read access.",
          "params": [
            {
              "name": "eventId",
              "description": "The unique identifier for the event."
            }
          ]
        }
      },
      {
        "path": "eventRegistrations/{eventId}/participants/{userId}",
        "definition": {
          "entityName": "EventRegistration",
          "schema": {
            "$ref": "#/backend/entities/EventRegistration"
          },
          "description": "Stores user registrations for each event. Includes denormalized user data (childName, parentName, email) for authorization independence.",
          "params": [
            {
              "name": "eventId",
              "description": "The unique identifier for the event."
            },
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            }
          ]
        }
      },
      {
        "path": "games/{gameId}",
        "definition": {
          "entityName": "Game",
          "schema": {
            "$ref": "#/backend/entities/Game"
          },
          "description": "Stores game definitions. Open read access.",
          "params": [
            {
              "name": "gameId",
              "description": "The unique identifier for the game."
            }
          ]
        }
      },
      {
        "path": "users/{userId}/gameScores/{gameId}",
        "definition": {
          "entityName": "GameScore",
          "schema": {
            "$ref": "#/backend/entities/GameScore"
          },
          "description": "Stores user-specific game scores.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "gameId",
              "description": "The unique identifier for the game."
            }
          ]
        }
      },
      {
        "path": "leaderboard/{gameId}/entries/{userId}",
        "definition": {
          "entityName": "LeaderboardEntry",
          "schema": {
            "$ref": "#/backend/entities/LeaderboardEntry"
          },
          "description": "Stores leaderboard entries for each game.",
          "params": [
            {
              "name": "gameId",
              "description": "The unique identifier for the game."
            },
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            }
          ]
        }
      },
      {
        "path": "learningContent/{contentId}",
        "definition": {
          "entityName": "LearningContent",
          "schema": {
            "$ref": "#/backend/entities/LearningContent"
          },
          "description": "Stores learning content (bhajans, mantras, videos, lessons). Open read access.",
          "params": [
            {
              "name": "contentId",
              "description": "The unique identifier for the learning content."
            }
          ]
        }
      },
      {
        "path": "users/{userId}/learningProgress/{contentId}",
        "definition": {
          "entityName": "UserLearningProgress",
          "schema": {
            "$ref": "#/backend/entities/UserLearningProgress"
          },
          "description": "Stores user-specific learning progress.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier for the user."
            },
            {
              "name": "contentId",
              "description": "The unique identifier for the learning content."
            }
          ]
        }
      },
      {
        "path": "galleries/{galleryId}",
        "definition": {
          "entityName": "Gallery",
          "schema": {
            "$ref": "#/backend/entities/Gallery"
          },
          "description": "Stores gallery metadata. Open read access.",
          "params": [
            {
              "name": "galleryId",
              "description": "The unique identifier for the gallery."
            }
          ]
        }
      },
      {
        "path": "photos/{photoId}",
        "definition": {
          "entityName": "Photo",
          "schema": {
            "$ref": "#/backend/entities/Photo"
          },
          "description": "Stores photo details.",
          "params": [
            {
              "name": "photoId",
              "description": "The unique identifier for the photo."
            }
          ]
        }
      },
      {
        "path": "contacts/{contactId}",
        "definition": {
          "entityName": "Contact",
          "schema": {
            "$ref": "#/backend/entities/Contact"
          },
          "description": "Stores contact form submissions. Admin access only.",
          "params": [
            {
              "name": "contactId",
              "description": "The unique identifier for the contact form submission."
            }
          ]
        }
      },
      {
        "path": "classRegistrations/{registrationId}",
        "definition": {
          "entityName": "ClassRegistration",
          "schema": {
            "$ref": "#/backend/entities/ClassRegistration"
          },
          "description": "Stores class registration information. Admin access only.",
          "params": [
            {
              "name": "registrationId",
              "description": "The unique identifier for the class registration."
            }
          ]
        }
      },
      {
        "path": "admins/{adminId}",
        "definition": {
          "entityName": "Admin",
          "schema": {
            "$ref": "#/backend/entities/Admin"
          },
          "description": "Stores admin user profiles. Existence implies admin privileges.",
          "params": [
            {
              "name": "adminId",
              "description": "The unique identifier for the admin."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore data structure is designed to support the Krishna Kids Zone application, focusing on scalability, security, and ease of management. The structure leverages denormalization to ensure authorization independence, enabling robust security rules and atomic operations. Segregation of data based on access patterns and the use of membership maps for collaborative data further enhance security and simplify rule creation. This design also addresses QAPs by enabling secure list operations through structural segregation.\n\n**Authorization Independence and Denormalization:**\n\n*   For user-specific data (stories progress, game scores, learning progress, events), the structure uses hierarchical paths `/users/{userId}/...`. This inherently ties the data to the user, simplifying security rules and ownership management without needing to denormalize user data into these collections.\n*   For collaborative data, such as event registrations where multiple users register for an event, the `eventRegistrations` subcollection includes the necessary user information (childName, parentName, email) directly within each registration document. This denormalization avoids the need for `get()` calls to the `users` collection in security rules.\n\n**Structural Segregation:**\n\n*   Publicly accessible data (stories, events, learning content, galleries) is stored in root-level collections (`/stories`, `/events`, `/learningContent`, `/galleries`).\n*   User-specific data (story progress, game scores, learning progress) is stored in subcollections under the `/users/{userId}` path, ensuring that only the user has access to their own data.\n*   Admin-specific data (admins) is stored in a dedicated collection `/admins`, separate from user data.\n\n**Access Modeling:**\n\n*   Path-Based Ownership: The structure uses `/users/{userId}` to define private data owned by users, making security rules straightforward.\n*   Membership Map: N/A, this app has not collaborative features that required membership maps.\n*   Global Roles: The `/admins/{adminId}` collection is used to manage admin roles, where the existence of a document implies admin privileges.\n\n**QAPs (Rules are not Filters):**\n\n*   The structural segregation into root-level collections for public data and user-specific subcollections ensures that list operations can be performed securely. Rules can allow listing documents in `/stories` or `/events` without complex filtering logic.\n\nThis data structure is designed to provide a balance between data organization, security, and performance, aligning with Firebase best practices and the specific requirements of the Krishna Kids Zone application."
  }
}